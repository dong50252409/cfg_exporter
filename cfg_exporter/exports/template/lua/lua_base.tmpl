@################################
@# generate descriptions and the necessary content
@################################
@def gen_head(table_obj, prefix):
@`f'--- @class {prefix}{table_obj.table_name}'`
@for field_name, desc in zip(table_obj.field_names,table_obj.descriptions):
@`f'--- @field {field_name}'` @`desc and '@ ' + desc or ''`
@end

local tab = {}

local merge
merge = function(t1, t2, base, layer)
    if layer > 0 then
        for k, v in pairs(t2) do
            t1[k] = merge(t1[k] or {}, v, base, layer - 1)
            return t1
        end
    else
        return setmetatable(t2, base)
    end
end
@end
@################################
@# generate const
@################################
@def gen_const(table_obj):
@#ignore
@for const_name, const_value, _, const_desc in table_obj.const_data_iter:
@`f'--- @field {util.upper_case(const_name)}'` @`const_desc and '@ ' + const_desc or ''`
tab.@util.upper_case(const_name) = @format_value(const_value)
@end
@end
@################################
@# generate config
@################################
@def gen_config(table_obj, prefix, reference_table=None,default_values=None):
@(
    import cfg_exporter.util as util
    def format_config(keys, row):
        if keys:
            return f'[{format_value(row[keys[0]])}] = {{{format_config(keys[1:], row)}}}'
        else:
            return f'{", ".join(f"{field_name} = {format_value(value)}" for field_name, value in util.iter_valid_value(zip(table_obj.field_names, row)))}'
)
@for rt_num, values in reference_table:
local rt_@rt_num!s = {
    @`', '.join(values)`
}

@end
local config

do
    @if default_values:
    local default_values = {
        @for k, v in util.iter_valid_value(default_values):
        @k = @format_value(v),
        @end
    }

    local base = { __index = default_values, __newindex = function() error("Attempt to add a new value") end }
    @else:
    local base = { __newindex = function() error("Attempt to add a new value") end }
    @end

    config = setmetatable({}, {__call = function(self, t) merge(self, t, base, @len(table_obj.key_columns)!s) end})

    @for row in table_obj.row_iter:
    config({@format_config(table_obj.key_columns, row)})
    @end

end

@`f'--- @type fun({", ".join(table_obj.key_field_name_iter)}):{prefix}{table_obj.table_name}'`
tab.get = function(@`', '.join(table_obj.key_field_name_iter)`)
    return config@`''.join(f'[{field_names}]' for field_names in table_obj.key_field_name_iter)`
end
@end
@################################
@# generate `gen_index` function
@################################
@def gen_index(table_obj, index_field_names, value_field_names):
@(
    def format_config(keys, row):
        if keys:
            return f'[{format_value(keys[0])}] = {{{format_config(keys[1:], row)}}}'
        else:
            return f'{", ".join(format_value(value) for value in row)}'
)
local @`'_'.join(index_field_names)`_config

do
    local base = {__newindex = function() error("Attempt to add a new value") end }

    @`'_'.join(index_field_names)`_config = setmetatable({}, {__call = function(self, t) merge(self, t, base, @len(index_field_names)!s) end})

    @for index_values, key_values in table_obj.index_list(index_field_names, value_field_names):
    @`'_'.join(index_field_names)`_config({@format_config(index_values, key_values)})
    @end

end

@`f'--- @type fun({", ".join(index_field_names)}):number[]'`
tab.get_by_@`'_'.join(index_field_names)` = function(@`', '.join([field_name for field_name in index_field_names])`)
    return @`'_'.join(index_field_names)`_config@`''.join(f'[{field_names}]' for field_names in index_field_names)`
end
@end
@require(table_obj, prefix, reference_table, default_values)
@gen_head(table_obj, prefix)
@gen_const(table_obj)
@gen_config(table_obj, prefix, reference_table, default_values)
return tab
