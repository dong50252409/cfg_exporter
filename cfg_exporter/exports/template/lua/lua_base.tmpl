@################################
@# generate descriptions and the necessary content
@################################
@def gen_head(table_obj, prefix):
@`f'--- @class {prefix}{table_obj.table_name}'`
@for field_name, desc in zip(table_obj.field_names,table_obj.descriptions):
@`f'--- @field {field_name}'` @`desc and '@ ' + desc or ''`
@end

local tab = {}
@end
@################################
@# generate const
@################################
@def gen_const(table_obj, prefix):
@#ignore
@for const_name, const_value, const_desc in table_obj.const_data_iter:
@`f'--- @field {const_name.upper()}'` @`const_desc and '@ ' + const_desc or ''`
tab.@`const_name.upper()` = @format_value(const_value)
@end
@end
@################################
@# generate config
@################################
@def gen_config(table_obj, reference_table=None):
@(
    import cfg_exporter.util as util
    def format_config(keys, row):
        if keys:
            return f'[{format_value(row[keys[0]])}] = {{{format_config(keys[1:], row)}}}'
        else:
            return f'{", ".join(f"{field_name} = {format_value(value)}" for field_name, value in util.iter_valid_value(zip(table_obj.field_names, row)))}'
)
@for rt_num, values in reference_table:
local rt_@rt_num!s = {
    @`', '.join(values)`
}

@end
local config = {
@for row in table_obj.row_iter:
    @format_config(table_obj.key_columns, row),
@end
}
@end
@################################
@# generate `get` function
@################################
@def gen_get(table_obj, prefix, default_values=None):
@#ignore
@if default_values:
local default_values = {
    @for k, v in util.iter_valid_value(default_values):
    @k = @format_value(v),
    @end
}

do
    local base = { __index = default_values, __newindex = function() error("Attempt to add a new value") end }
    local set_default_values
    set_default_values = function(row, layer)
        if layer > 0 then
            for _, t in pairs(row) do
                set_default_values(t, layer - 1)
            end
        else
            setmetatable(row, base)
        end
    end
    set_default_values(config, @`str(len(table_obj.key_columns))`)
    base.__metatable = false
end

@end
@`f'--- @type fun({", ".join(table_obj.key_field_name_iter)}):{prefix}{table_obj.table_name}'`
tab.get = function(@`', '.join(table_obj.key_field_name_iter)`)
    return config@`''.join(f'[{field_names}]' for field_names in table_obj.key_field_name_iter)`
end
@end
@################################
@# generate `gen_index` function
@################################
@def gen_index(table_obj, index_field_names, value_field_names):
@(
    def format_config(keys, row):
        if keys:
            return f'[{format_value(keys[0])}] = {{{format_config(keys[1:], row)}}}'
        else:
            return f'{", ".join(format_value(value) for value in row)}'
)
local @`'_'.join(index_field_names)`_config = {
@for index_values, key_values in table_obj.index_list(index_field_names, value_field_names):
    @format_config(index_values, key_values),
@end
}

@`f'--- @type fun({", ".join(index_field_names)}):number[]'`
tab.get_by_@`'_'.join(index_field_names)` = function(@`', '.join([field_name for field_name in index_field_names])`)
    return @`'_'.join(index_field_names)`_config@`''.join(f'[{field_names}]' for field_names in index_field_names)`
end
@end
@require(table_obj, prefix, default_values, reference_table)
@gen_head(table_obj, prefix)
@gen_const(table_obj, prefix)
@gen_config(table_obj, reference_table)
@gen_get(table_obj, prefix, default_values)
return tab
