@################################
@# generate head
@################################
@def gen_head(reference_table=[]):
@#ignore
@for rt_num, values in reference_table:
_rt_@rt_num!s = [
    @`', '.join(values)`
]
@end
@end
@################################
@# generate class
@################################
@def gen_class(table_obj, prefix, default_values={}):

class @util.pascal_case(f'{prefix}{table_obj.table_name}'):
    import typing

    __slots__ = ('_kwargs', )

    def __init__(self, **kwargs) -> None:
        object.__setattr__(self, '_kwargs', kwargs)

@for field_name, data_type, desc in zip(table_obj.field_names, table_obj.data_types, table_obj.descriptions):
    @`f'@property'`
    def @`field_name`(self) -> @`real_type(data_type)`:
        """
        @`desc`
        """
        return self._kwargs.get('@`field_name`'@`field_name in default_values and f', {format_value(default_values[field_name])}' or ''`)

@end
    def __setattr__(self, name: str, value: typing.Any) -> typing.NoReturn:
        raise AttributeError('can\'t set attribute')
@end
@################################
@# generate config
@################################
@def gen_config(table_obj, prefix, reference_table=[]):

_config = {
@for keys, row in zip(table_obj.key_data_iter, table_obj.row_iter):
    @`format_value(keys)`: @`util.pascal_case(f'{prefix}{table_obj.table_name}')`(@`f'{", ".join(f"{field_name}={format_value(value)}" for field_name, value in util.iter_valid_value(zip(table_obj.field_names, row)))}'`),
@end
}


def get(@`f', '.join(f'{table_obj.field_name_by_column_num(col_num)}: {real_type(table_obj.data_type_by_column_num(col_num))}' for col_num in table_obj.key_columns)`) -> @util.pascal_case(f'{prefix}{table_obj.table_name}'):
    return _config[@`f', '.join(table_obj.key_field_name_iter)`]
@end
@################################
@# generate const
@################################
@def gen_const(table_obj):
@#ignore
@for const_name, const_value, const_desc in table_obj.const_data_iter:
@util.upper_case(const_name) = @format_value(const_value)    @`const_desc and f'# {const_desc}' or ''`
@end
@end
@################################
@# generate `gen_index` function
@################################
@def gen_index(table_obj, index_field_names, value_field_names):

_@`'_'.join(index_field_names)`_config = {
@if len(index_field_names) > 1:
@for index_values, key_values in table_obj.index_list(index_field_names, value_field_names):
    (@`', '.join(f'{format_value(v)}' for v in index_values)`): [@`', '.join(f'{format_value(v)}' for v in key_values)`],
@end
@else:
@for index_values, key_values in table_obj.index_list(index_field_names, value_field_names):
    @`', '.join(f'{format_value(v)}' for v in index_values)`: [@`', '.join(f'{format_value(v)}' for v in key_values)`],
@end
@end
}


def get_@`'_'.join(index_field_names)`_config(@`', '.join(f'{field_name}: {real_type(table_obj.data_type_by_column_num(table_obj.column_num_by_field_name(field_name)))}' for field_name in index_field_names)`) -> list:
    return _@`'_'.join(index_field_names)`_config[@`', '.join(index_field_names)`]
@end
@require(table_obj, prefix, reference_table, default_values)
@gen_head(reference_table)
@gen_const(table_obj)
@gen_class(table_obj, prefix, default_values)
@gen_config(table_obj, prefix)