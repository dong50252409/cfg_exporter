@################################
@# generate class
@################################
@def gen_class(table_obj, prefix):
import typing


class @`prefix`@`table_obj.table_name`:
    __slots__ = ('_kwargs', )

    def __init__(self, **kwargs) -> None:
        object.__setattr__(self, '_kwargs', kwargs)

@for field_name, data_type, desc in zip(table_obj.field_names, table_obj.data_types, table_obj.descriptions):
    @`f'@property'`
    def @`field_name`(self) -> @`real_type(data_type)`:
        """
        @`desc`
        """
        return self._kwargs.get('@`field_name`')

@end
    def __setattr__(self, name: str, value: typing.Any) -> typing.NoReturn:
        raise AttributeError('can\'t set attribute')
@end
@################################
@# generate config
@################################
@def gen_config(table_obj, prefix):

_config = {
@for keys, row in zip(table_obj.key_data_iter, table_obj.row_iter):
    @`format_value(keys)`: @`prefix`@`table_obj.table_name`(@`f'{", ".join(f"{field_name}={format_value(value)}" for field_name, value in util.iter_valid_value(zip(table_obj.field_names, row)))}'`),
@end
}


def get(@`f', '.join(table_obj.key_field_name_iter)`) -> @`prefix`@`table_obj.table_name`:
    return _config[@`f', '.join(table_obj.key_field_name_iter)`]
@end
@################################
@# generate const
@################################
@def gen_const(table_obj):

@for const_name, const_value, const_desc in table_obj.const_data_iter:
@const_name.upper() = @format_value(const_value)    @`const_desc and f'# {const_desc}' or ''`
@end
@end
@require(table_obj, prefix)
@gen_class(table_obj, prefix)
@gen_config(table_obj, prefix)
@gen_const(table_obj)